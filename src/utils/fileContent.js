module.exports = {
  indexJS: `require("dotenv").config();
const express = require("express");
const morgan = require("morgan");
const cors = require("cors");
const helmet = require("helmet");

const app = express();
const PORT = process.env.PORT || 5000;

//cors & helmet => for security
app.use(cors());
app.use(helmet());

// used to log requests
if (process.env.NODE_ENV === "development") {
  app.use(morgan("dev"));
}

app.use(
  express.json({
    extended: false,
  })
);

app.get("/", (req, res) => {
  res.json("API running.");
});

app.listen(PORT, () => console.log('Server is running at http://127.0.0.1:' + PORT));
`,
  packageJson: `{
  "name": "${process.cwd().split("\\")[process.cwd().split("\\").length - 1]}",
  "version": "1.0.0",
  "description": "Node-express project",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "*",
    "cors": "*",
    "dotenv": "*",
    "express": "*",
    "helmet": "*",
    "morgan": "*"
  },
  "devDependencies": {
    "nodemon": "*"
  }
}
`,
  env: `NODE_ENV = development`,
  readmeMd: `# Hello
  `,
  gitignore: `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port
`,
  configIndexJS: `/**
* Configurations goes here
* e.x: Database configuration
*/
`,
  modelsIndexJS: `/**
* Models goes here according to database
*/
`,
  routesIndexJS: `/**
* Write routes here
*/

// const express = require("express");
// const router = express.Router();

// router.get("sayHello", (req, res) => {
//   res.send("Hello world");
// });

// module.exports = router;
`,
  utilsIndexJS: `/**
* write Utility functions
*/

// module.exports = {
//   sayHello: () => {
//     console.log("Hello World");
//   }
// }
`,
};
